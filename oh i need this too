<!DOCTYPE html>
<html lang="en">
<head>
    <link rel="stylesheet" href="common.css" />
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Manual Macro Tracker - AI Powered</title>
    <style>
        body {
            font-family: sans-serif;
            background: #121212;
            color: white;
            padding: 20px;
        }
        #output {
            margin-top: 20px;
            background: #1e1e1e;
            padding: 20px;
            border-radius: 8px;
        }
        .food-card {
            background: #1e1e1e;
            border: 1px solid #333;
            border-radius: 8px;
            padding: 15px;
            margin: 10px 0;
            cursor: pointer;
            transition: background 0.2s ease;
        }
        .food-card:hover {
            background: #2c2c2c;
        }
    </style>
</head>
<body>

<h1>My macro tracker :3</h1>
<div  <div class="macro">
              <span class="macro-label">Calories</span>
              <progress id="calorieBar" max="2000" value="0"></progress>
              <div class="macro-value" id="calorieVal">0 / 2000 kcal</div>
          </div>

          <div class="macro">
              <span class="macro-label">Protein</span>
              <progress id="proteinBar" max="150" value="0"></progress>
              <div class="macro-value" id="proteinVal">0 / 150g</div>
          </div>

          <div class="macro">
              <span class="macro-label">Carbs</span>
              <progress id="carbBar" max="250" value="0"></progress>
              <div class="macro-value" id="carbVal">0 / 250g</div>
          </div>

          <div class="macro">
              <span class="macro-label">Fat</span>
              <progress id="fatBar" max="70" value="0"></progress>
              <div class="macro-value" id="fatVal">0 / 70g</div>
          </div>
     id="output">
    <h2>Your Logged Foods</h2>
    <ul id="foodList"></ul>
    <h3>Total Macros</h3>
    <p id="totals">Calories: 0 kcal | Protein: 0g | Carbs: 0g | Fat: 0g</p>
</div>
<script>
    function getGoal(key, defaultVal) {
      const val = localStorage.getItem(key);
      return val ? parseFloat(val) : defaultVal;
    }

    function loadTodayMacros() {
      const today = new Date().toISOString().split('T')[0];
      const saved = localStorage.getItem(`foodList_${today}`);
      let macros = { calories: 0, protein: 0, carbs: 0, fat: 0 };

      if (saved) {
        try {
          const items = JSON.parse(saved);
          for (const item of items) {
            macros.calories += item.nf_calories || 0;
            macros.protein += item.nf_protein || 0;
            macros.carbs += item.nf_total_carbohydrate || 0;
            macros.fat += item.nf_total_fat || 0;
          }
        } catch (e) {
          console.error('Failed to parse saved food data:', e);
        }
      }

      return macros;
    }

    function updateBars() {
      const macros = loadTodayMacros();

      const calorieGoal = getGoal('goalCalories', 2000);
      const proteinGoal = getGoal('goalProtein', 150);
      const carbGoal = getGoal('goalCarbs', 250);
      const fatGoal = getGoal('goalFat', 70);

      document.getElementById('calorieBar').max = calorieGoal;
      document.getElementById('calorieBar').value = macros.calories;
      document.getElementById('calorieVal').textContent = `${macros.calories.toFixed(0)} / ${calorieGoal} kcal`;

      document.getElementById('proteinBar').max = proteinGoal;
      document.getElementById('proteinBar').value = macros.protein;
      document.getElementById('proteinVal').textContent = `${macros.protein.toFixed(0)} / ${proteinGoal}g`;

      document.getElementById('carbBar').max = carbGoal;
      document.getElementById('carbBar').value = macros.carbs;
      document.getElementById('carbVal').textContent = `${macros.carbs.toFixed(0)} / ${carbGoal}g`;

      document.getElementById('fatBar').max = fatGoal;
      document.getElementById('fatBar').value = macros.fat;
      document.getElementById('fatVal').textContent = `${macros.fat.toFixed(0)} / ${fatGoal}g`;
    }

    window.addEventListener('DOMContentLoaded', updateBars);
</script>
<script>
    const foodList = [];
    const foodListEl = document.getElementById('foodList');
    const totalsEl = document.getElementById('totals');

    function getTodayKey(base) {
        const today = new Date().toISOString().split('T')[0];
        return `${base}_${today}`;
    }

    function saveFoodList(list) {
        localStorage.setItem(getTodayKey('foodList'), JSON.stringify(list));
    }

    function loadFoodList() {
        const saved = localStorage.getItem(getTodayKey('foodList'));
        return saved ? JSON.parse(saved) : [];
    }

    function clearOldFoodData(maxDays = 7) {
        const now = new Date();
        for (let i = 0; i < localStorage.length; i++) {
            const key = localStorage.key(i);
            if (key.startsWith('foodList_')) {
                const dateStr = key.split('_')[1];
                const entryDate = new Date(dateStr);
                const ageInDays = (now - entryDate) / (1000 * 60 * 60 * 24);
                if (ageInDays > maxDays) {
                    localStorage.removeItem(key);
                    console.log(`ðŸ§¹ Removed old log: ${key}`);
                }
            }
        }
    }

    function saveCompactMacros(protein, fat, carbs, calories) {
        const now = new Date();
        const day = String(now.getDate()).padStart(2, '0');
        const month = String(now.getMonth() + 1).padStart(2, '0');
        const year = now.getFullYear();
        const compact = `${day} ${month} ${year} ${protein.toFixed(0)}p ${fat.toFixed(0)}f ${carbs.toFixed(0)}c ${calories.toFixed(0)}k`;
        const storageKey = `macros_${day}-${month}-${year}`;
        localStorage.setItem(storageKey, compact);
        console.log(`ðŸ“¦ Saved: ${storageKey} => ${compact}`);
    }

    function renderList() {
        foodListEl.innerHTML = '';
        let totalCalories = 0, totalProtein = 0, totalCarbs = 0, totalFat = 0;

        foodList.forEach((item) => {
            const card = document.createElement('div');
            card.className = 'food-card';
            card.tabIndex = 0;
            card.setAttribute('role', 'button');
            card.setAttribute('aria-label', `View macros for ${item.food_name}`);

            card.innerHTML = `
                <strong>${item.food_name}</strong><br />
                ${item.serving_qty} ${item.serving_unit}<br />
                ðŸ”¥ ${item.nf_calories.toFixed(1)} kcal |
                ðŸ¥© ${item.nf_protein.toFixed(1)}g |
                ðŸŒ¾ ${item.nf_total_carbohydrate.toFixed(1)}g |
                ðŸ¥‘ ${item.nf_total_fat.toFixed(1)}g
            `;

            card.addEventListener('contextmenu', e => {
                e.preventDefault();
                localStorage.setItem('lastEntry', JSON.stringify({
                    prompt: `${item.serving_qty} ${item.serving_unit} ${item.food_name}`,
                    kcal: item.nf_calories.toFixed(1),
                    protein: item.nf_protein.toFixed(1),
                    fat: item.nf_total_fat.toFixed(1),
                    carbs: item.nf_total_carbohydrate.toFixed(1)
                }));
                window.location.href = 'macro.html';
            });

            foodListEl.appendChild(card);

            totalCalories += item.nf_calories;
            totalProtein += item.nf_protein;
            totalCarbs += item.nf_total_carbohydrate;
            totalFat += item.nf_total_fat;
        });

        totalsEl.textContent = `Calories: ${totalCalories.toFixed(1)} kcal | Protein: ${totalProtein.toFixed(1)}g | Carbs: ${totalCarbs.toFixed(1)}g | Fat: ${totalFat.toFixed(1)}g`;

        saveFoodList(foodList);
        saveCompactMacros(totalProtein, totalFat, totalCarbs, totalCalories);
    }

    window.addEventListener('DOMContentLoaded', () => {
        clearOldFoodData();
        const savedFoods = loadFoodList();
        if (savedFoods.length) {
            foodList.push(...savedFoods);
            renderList();
        }
    });
</script>

<!-- Bottom Navigation Bar -->
<nav class="bottom-nav" role="navigation" aria-label="Main navigation">
    <a href="habits.html" aria-label="Go to Habits page">
        <img src="images/Onriselogo.png" alt="Onrise" width="50">
    </a>
    <a href="index.html" aria-label="Go to Dashboard page">
        <img src="images/goldencarrotblackbg.jpg" alt="Golden carrot" width="50">
    </a>
    <a href="settings.html" aria-label="Go to Settings page">
        <img src="images/Settingsblackpng.png" alt="Settings" width="50">
    </a>
</nav>

</body>
</html>
